/*
 * UniCrypt
 *
 *  UniCrypt(tm) : Cryptographical framework allowing the implementation of cryptographic protocols e.g. e-voting
 *  Copyright (C) 2014 Bern University of Applied Sciences (BFH), Research Institute for
 *  Security in the Information Society (RISIS), E-Voting Group (EVG)
 *  Quellgasse 21, CH-2501 Biel, Switzerland
 *
 *  Licensed under Dual License consisting of:
 *  1. GNU Affero General Public License (AGPL) v3
 *  and
 *  2. Commercial license
 *
 *
 *  1. This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU Affero General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Affero General Public License for more details.
 *
 *   You should have received a copy of the GNU Affero General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *
 *  2. Licensees holding valid commercial licenses for UniCrypt may use this file in
 *   accordance with the commercial license agreement provided with the
 *   Software or, alternatively, in accordance with the terms contained in
 *   a written agreement between you and Bern University of Applied Sciences (BFH), Research Institute for
 *   Security in the Information Society (RISIS), E-Voting Group (EVG)
 *   Quellgasse 21, CH-2501 Biel, Switzerland.
 *
 *
 *   For further information contact <e-mail: unicrypt@bfh.ch>
 *
 *
 * Redistributions of files must retain the above copyright notice.
 */
package lib.unicrypt.src.main.java.ch.bfh.unicrypt.math.algebra.dualistic.interfaces;

import lib.unicrypt.src.main.java.ch.bfh.unicrypt.math.algebra.additive.interfaces.AdditiveCyclicGroup;
import ch.bfh.unicrypt.random.classes.ReferenceRandomByteSequence;
import ch.bfh.unicrypt.random.interfaces.RandomByteSequence;

/**
 * TODO This interface represents the mathematical concept of a cyclic ring. A cyclic ring is a ring and an additive
 * cyclic group that is generated by a single element. That is, it contains an element g such that every other element
 * of the ring may be obtained by repeatedly applying the operation within the ring or its inverse to g. Each element
 * can be written as a power of g in multiplicative notation, or as a multiple of g in additive notation. This element g
 * is called a generator of the ring. It is therefore implemented as a specialization of {@link Ring} and
 * {@link AdditiveCyclicGroup}.
 * <p>
 * @author rolfhaenni
 */
public interface CyclicRing<V extends Object>
	   extends Ring<V>, AdditiveCyclicGroup<V> {

	// The following methods are overridden from AdditiveCyclicGroup with an adapted return type
	@Override
	public DualisticElement<V> getDefaultGenerator();

	@Override
	public DualisticElement<V> getRandomGenerator();

	@Override
	public DualisticElement<V> getRandomGenerator(RandomByteSequence randomByteSequence);

	@Override
	public DualisticElement<V> getIndependentGenerator(int index);

	@Override
	public DualisticElement<V> getIndependentGenerator(int index, ReferenceRandomByteSequence referenceRandomByteSequence);

}
